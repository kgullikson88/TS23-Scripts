import numpy
import matplotlib.pyplot as plt
import sys
from collections import defaultdict


"""
  Program to analyze the output of SensitivityAnalysis, and make some pretty plots!
  Very similar to MakeSensitivityPlot.py, but takes output files with S/N in them (2nd column)
     Makes separate figures for the different S/N values
  Command line arguments:
     -combine: will combine several output (say as generated by xgrid) NOT YET IMPLEMENTED
     -xaxis: specifies the variable to use as the x axis. Choices are as follows
         SecondarySpectralType
	 SecondaryMass
	 MassRatio
	 DetectionRate
	 AverageSignificance
     -yaxis: specifies the variable to use for the y axis Choices are the same as for -xaxis
     -infile: specifies the input filename (default is Sensitivity/summary.dat).
         If combine is True, the input filename should be a list of comma-separated 
	 filenames
"""


if __name__ == "__main__":
  #Defaults
  combine = False
  xaxis = "SecondarySpectralType"
  yaxis = "DetectionRate"
  infilename = "Sensitivity/summary.dat"
  
  #Command-line overrides
  for arg in sys.argv:
    if "combine" in arg:
      combine = True
    elif "xaxis" in arg:
      xaxis = arg.split("=")[-1]
    elif "yaxis" in arg:
      yaxis = arg.split("=")[-1]
    elif "infile" in arg:
      infilename = arg.split("=")[-1]

  #Set up dictionaries/lists
  s_spt = defaultdict(lambda: defaultdict(list))       #Secondary spectral type
  p_mass = defaultdict(lambda: defaultdict(list))      #Primary mass
  s_mass = defaultdict(lambda: defaultdict(list))      #Secondary mass
  q = defaultdict(lambda: defaultdict(list))           #Mass ratio
  det_rate = defaultdict(lambda: defaultdict(list))    #Detection rate
  sig = defaultdict(lambda: defaultdict(list))         #Average detection significance
  namedict = {"SecondarySpectralType": s_spt,
              "SecondaryMass": s_mass,
	      "MassRatio": q,
	      "DetectionRate": det_rate,
              "AverageSignificance": sig}

  #Read in file/files  WARNING! ASSUMES A CERTAIN FORMAT. MUST CHANGE THIS IF THE FORMAT CHANGES!
  if combine:
    sys.exit("Sorry! Not implemented yet!")
  
  else:
    infile = open(infilename)
    lines = infile.readlines()
    for line in lines[1:]:
      segments = line.split()
      p_spt = segments[0]
      snr = float(segments[1])
      s_spt[p_spt][snr].append(segments[2])
      p_mass[p_spt][snr].append(float(segments[3]))
      s_mass[p_spt][snr].append(float(segments[4]))
      q[p_spt][snr].append(float(segments[5]))
      det_rate[p_spt][snr].append(float(segments[6]))
      sig[p_spt][snr].append(float(segments[7]))


  #Finally, plot
  index = 0
  for p_spt in sorted(s_spt.keys()):
    plt.figure(index)
    index += 1
    for snr in sorted(s_spt[p_spt].keys()):
      x = namedict[xaxis][p_spt][snr]
      y = namedict[yaxis][p_spt][snr]
      if "SpectralType" in xaxis:
        plt.plot(range(len(x)), y, label="S/N = %.0f" %snr)
        plt.xticks(range(len(x)), x, size="small")
      elif "SpectralType" in yaxis:
        plt.plot(x, range(len(y)), label="S/N = %.0f" %snr)
        plt.yticks(range(len(y)), y, size="small")
      else:
        plt.plot(x, y, label="S/N = %.0f" %snr)
    plt.legend(loc='best')
    plt.xlabel(xaxis)
    plt.ylabel(yaxis)
    plt.title("Sensitivity for "+p_spt+" Primary")
  plt.show()



